@using System.Globalization
@using Microsoft.AspNetCore.Identity
@using Softmax.XCollections.Data.Enums
@inject UserManager<ApplicationUser> UserManager
@model IEnumerable<Softmax.XCollections.Models.LoanModel>
@{
    ViewBag.Title = "Loan Approval Requests";
}
<div class="row">
    <div class="col-md-12">
        <div class="card-header">
            <i class="fa fa-table"></i> @ViewBag.Title - <i><strong>@ViewData["RecordCount"] </strong> Record(s)</i>

        </div>
        <div class="card-body">
            <form asp-action="ApprovalRequest" method="get">
                <div class="form-actions no-color">
                    <p>
                        Search: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
                        <input type="submit" value="Search" class="btn btn-default btn-sm" /> |
                        <a asp-action="History">Back to Full List</a>
                    </p>
                </div>
            </form>
            <table class="table table-bordered" cellspacing="0">
                <thead>
                     
                    <tr>
                        <th>
                            <a asp-action="ApprovalRequest" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Date</a>
                        </th>
                        <th>
                            Account
                        </th>
                        <th>
                            Customer
                        </th>
                        <th>
                            Loan Officer
                        </th>
                        <th>
                            Product
                        </th>
                        <th>
                            <a asp-action="ApprovalRequest" asp-route-sortOrder="@ViewData["AmountSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Amount</a>
                        </th>
                        <th>
                            Remarks
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        foreach (var item in Model)
                        {
                    <tr>

                        <td>
                            @item.DateCreated
                        </td>

                        <td>
                            @item.Customer.AspNetUsers.UniqueNumber
                        </td>

                        <td>
                            @item.Customer.AspNetUsers.FirstName @item.Customer.AspNetUsers.OtherName @item.Customer.AspNetUsers.LastName
                        </td>
                        <td>
                            @item.Employee.AspNetUsers.FirstName @item.Employee.AspNetUsers.LastName
                        </td>

                        <td>
                            @item.Product.Name
                        </td>
                        <td>
                            @item.Amount.ToString("C", new CultureInfo("HA-LATN-NG"))
                        </td>
                        <td>
                            @if (item.StatusCode == StatusCode.Pending)
        {
                    <span class="text-danger">Awaiting Approval</span> <br />
if (await UserManager.IsInRoleAsync(await UserManager.FindByNameAsync(User.Identity.Name), "Manager"))
{
                    @Html.ActionLink("Approve", "Approve", "Loans", new { id = item.LoanId }, new { @class = "btn btn-outline-primary btn-sm" })

                    @Html.ActionLink("Decline", "Decline", "Loans", new { id = item.LoanId }, new { @class = "btn btn-outline-danger btn-sm" })
}
}
else if (item.StatusCode == StatusCode.Declined)
{
                    <span class="btn btn-outline-danger btn-sm">Declined</span>
}
else
{
                    @Html.ActionLink("Refunds", "Refund", "Loans", new { id = item.LoanId }, new { @class = "btn btn-outline-primary btn-sm" })

                    @Html.ActionLink("Details", "Details", "Loans", new { id = item.LoanId }, new { @class = "btn btn-primary btn-sm" })
}
                        </td>
                    </tr>

                        }
                    }
                </tbody>
            </table>
            @{
                var PaginatedModel = (PaginatedList<LoanModel>)Model;

                string prevDisabled = !PaginatedModel.HasPreviousPage ? "disabled" : "";

                string nextDisabled = !PaginatedModel.HasNextPage ? "disabled" : "";
            }

            <a asp-action="History"
               asp-route-sortOrder="@ViewData["CurrentSortOrder"]"
               asp-route-page="@(PaginatedModel.PageIndex - 1)"
               asp-route-currentFilter="@ViewData["FilterParam"]"
               class="btn btn-primary @prevDisabled">

                Previous

            </a>

            <a asp-action="History"
               asp-route-sortOrder="@ViewData["CurrentSortOrder"]"
               asp-route-page="@(PaginatedModel.PageIndex + 1)"
               asp-route-currentFilter="@ViewData["FilterParam"]"
               class="btn btn-primary @nextDisabled">

                Next

            </a>
        </div>
        <div class="card-footer small text-muted">Last Update @DateTime.Now</div>
    </div>
</div>